<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zhd.exploit.api.mapper.PayqrcodeMapper" >
  <resultMap id="BaseResultMap" type="com.zhd.exploit.api.entity.Payqrcode" >
    <id column="codeid" property="codeid" jdbcType="INTEGER" />
    <result column="note" property="note" jdbcType="VARCHAR" />
    <result column="qrcode" property="qrcode" jdbcType="VARCHAR" />
    <result column="price" property="price" jdbcType="DECIMAL" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="updatetime" property="updatetime" jdbcType="TIMESTAMP" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    codeid, note, qrcode, price, account, updatetime, createtime
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from payqrcode
    where codeid = #{codeid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from payqrcode
    where codeid = #{codeid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zhd.exploit.api.entity.Payqrcode" >
    insert into payqrcode (codeid, note, qrcode, 
      price, account, updatetime, 
      createtime)
    values (#{codeid,jdbcType=INTEGER}, #{note,jdbcType=VARCHAR}, #{qrcode,jdbcType=VARCHAR}, 
      #{price,jdbcType=DECIMAL}, #{account,jdbcType=VARCHAR}, #{updatetime,jdbcType=TIMESTAMP}, 
      #{createtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.zhd.exploit.api.entity.Payqrcode" >
    insert into payqrcode
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="codeid != null" >
        codeid,
      </if>
      <if test="note != null" >
        note,
      </if>
      <if test="qrcode != null" >
        qrcode,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="updatetime != null" >
        updatetime,
      </if>
      <if test="createtime != null" >
        createtime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="codeid != null" >
        #{codeid,jdbcType=INTEGER},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="qrcode != null" >
        #{qrcode,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null" >
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zhd.exploit.api.entity.Payqrcode" >
    update payqrcode
    <set >
      <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="qrcode != null" >
        qrcode = #{qrcode,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null" >
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="createtime != null" >
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where codeid = #{codeid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zhd.exploit.api.entity.Payqrcode" >
    update payqrcode
    set note = #{note,jdbcType=VARCHAR},
      qrcode = #{qrcode,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      account = #{account,jdbcType=VARCHAR},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      createtime = #{createtime,jdbcType=TIMESTAMP}
    where codeid = #{codeid,jdbcType=INTEGER}
  </update>
</mapper>