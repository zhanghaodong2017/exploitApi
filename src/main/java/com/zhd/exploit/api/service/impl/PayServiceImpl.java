package com.zhd.exploit.api.service.impl;

import static com.zhd.exploit.api.utils.StringUtils.isEmpty;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.zhd.exploit.api.dto.BizException;
import com.zhd.exploit.api.dto.PayDTO;
import com.zhd.exploit.api.dto.RspPayDTO;
import com.zhd.exploit.api.dto.RspQueryDTO;
import com.zhd.exploit.api.entity.CpUserInfo;
import com.zhd.exploit.api.entity.PayLog;
import com.zhd.exploit.api.enums.PayErrorCode;
import com.zhd.exploit.api.enums.PayState;
import com.zhd.exploit.api.mapper.CpUserInfoMapper;
import com.zhd.exploit.api.mapper.PayLogMapper;
import com.zhd.exploit.api.mapper.PayqrcodeMapper;
import com.zhd.exploit.api.service.PayService;
import com.zhd.exploit.api.utils.DateUtils;
import com.zhd.exploit.api.utils.MD5Utill;

@Service
public class PayServiceImpl implements PayService {
	@Autowired
	private CpUserInfoMapper cpUserInfoMapper;
	@Autowired
	private PayLogMapper payLogMapper;
	@Autowired
	private PayqrcodeMapper payqrcodeMapper;

	@Override
	public RspPayDTO pay(PayDTO payDTO) {
		// TODO 校验参数
		checkParams(payDTO);
		// 支付路由获取支付二维码
		String qrcode = getQrcode(Integer.valueOf(payDTO.getAppmount()));
		if (qrcode != null) {
			RspPayDTO rspPayDTO = PayErrorCode.SUCCESS.transPayDTO();
			rspPayDTO.setCporderno(payDTO.getCporderno());
			rspPayDTO.setMerchantid(payDTO.getMerchantid());
			rspPayDTO.setQrcode(qrcode);
			return rspPayDTO;
		} else {
			return PayErrorCode.NO_PAY_CHANNEL.transPayDTO();
		}
	}

	private String getQrcode(Integer appmount) {
		// TODO 根据支付方式、价格 获取可取收款二维码

		return null;
	}

	private void checkParams(PayDTO payDTO) {
		String merchantid = payDTO.getMerchantid();
		String cporderno = payDTO.getCporderno();
		String appmount = payDTO.getAppmount();
		String sign = payDTO.getSign();
		if (isEmpty(merchantid) || isEmpty(cporderno) || isEmpty(sign) || isEmpty(appmount)) {
			throw new BizException(PayErrorCode.PARAM_NOT_COMPLETE);
		}
		CpUserInfo cpUserInfo = cpUserInfoMapper.queryByMerchantid(merchantid);
		if (cpUserInfo == null) {
			throw new BizException(PayErrorCode.ERR_MERCHANTID);
		}
		PayLog payLog = payLogMapper.selectByKey(merchantid, cporderno);
		if (payLog != null) {
			throw new BizException(PayErrorCode.REPEAT_CPORDERNO);
		}
		try {
			if (Integer.valueOf(appmount) <= 0) {
				throw new BizException(PayErrorCode.ERR_AMOUNT);
			}
		} catch (Exception e) {
			throw new BizException(PayErrorCode.ERR_AMOUNT);
		}
		// 验签
		StringBuffer buffer = new StringBuffer();
		buffer.append(merchantid).append("|").append(cporderno).append("|");
		buffer.append(appmount).append("|").append(cpUserInfo.getMd5key());
		String signData = buffer.toString();
		String hexString = MD5Utill.toHexString(MD5Utill.md5(signData));
		if (!hexString.equals(sign)) {
			throw new BizException(PayErrorCode.ERR_SIGN);
		}
	}

	@Override
	public RspQueryDTO queryResult(PayDTO payDTO) {
		String merchantid = payDTO.getMerchantid();
		String cporderno = payDTO.getCporderno();
		String sign = payDTO.getSign();
		if (isEmpty(merchantid) || isEmpty(cporderno) || isEmpty(sign)) {
			return new RspQueryDTO(PayErrorCode.PARAM_NOT_COMPLETE);
		}
		CpUserInfo cpUserInfo = cpUserInfoMapper.queryByMerchantid(merchantid);
		if (cpUserInfo == null) {
			return new RspQueryDTO(PayErrorCode.ERR_MERCHANTID);
		}
		// 验签
		StringBuffer buffer = new StringBuffer();
		buffer.append(merchantid).append("|").append(cporderno).append("|").append(cpUserInfo.getMd5key());
		String signData = buffer.toString();
		String hexString = MD5Utill.toHexString(MD5Utill.md5(signData));
		if (!hexString.equals(sign)) {
			return new RspQueryDTO(PayErrorCode.ERR_SIGN);
		}
		PayLog payLog = payLogMapper.selectByKey(merchantid, cporderno);
		if (payLog == null) {
			return new RspQueryDTO(PayState.NO_RESULT);
		}
		String paystate = payLog.getPaystate();
		RspQueryDTO rspQueryDTO = new RspQueryDTO(paystate);
		try {
			String paytime = DateUtils.format(DateUtils.secondFormat, payLog.getPaytime());
			rspQueryDTO.setPaytime(paytime);
		} catch (Exception e) {
		}
		return rspQueryDTO;
	}

}
