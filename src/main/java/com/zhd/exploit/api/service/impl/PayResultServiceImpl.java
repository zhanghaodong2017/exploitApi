package com.zhd.exploit.api.service.impl;

import static com.zhd.exploit.api.utils.StringUtils.eq;

import java.io.IOException;
import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.google.gson.Gson;
import com.zhd.exploit.api.dto.AlipayDTO;
import com.zhd.exploit.api.entity.CpUserInfo;
import com.zhd.exploit.api.entity.PayLog;
import com.zhd.exploit.api.entity.Payqrcode;
import com.zhd.exploit.api.enums.NotifyState;
import com.zhd.exploit.api.enums.PayState;
import com.zhd.exploit.api.mapper.CpUserInfoMapper;
import com.zhd.exploit.api.mapper.PayLogMapper;
import com.zhd.exploit.api.mapper.PayqrcodeMapper;
import com.zhd.exploit.api.service.PayResultService;
import com.zhd.exploit.api.utils.DateUtils;
import com.zhd.exploit.api.utils.HttpUtils;
import com.zhd.exploit.api.utils.StringUtils;
import com.zhd.exploit.api.utils.UtilJson;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class PayResultServiceImpl implements PayResultService {

	@Autowired
	private PayqrcodeMapper payqrcodeMapper;
	@Autowired
	private PayLogMapper payLogMapper;
	@Autowired
	private CpUserInfoMapper cpUserInfoMapper;

	/**
	 * 
	 */
	@Override
	public AlipayDTO queryResult(PayLog payLog) {
		Integer qrcodeid = payLog.getQrcodeid();
		Payqrcode payqrcode = payqrcodeMapper.selectByPrimaryKey(qrcodeid);
		if (payqrcode == null) {
			log.info("支付结果查询：{}未查询到对应的二维码", qrcodeid);
			return null;
		}
		// 0未登录，1已登录，2登录过期，3异常
		String loginstate = payqrcode.getLoginstate();
		if (!eq("1", loginstate)) {
			log.info("支付结果查询：{}登录状态不正常", qrcodeid);
			return null;
		}
		return queryByLogin(payqrcode, payLog.getCreatetime());
	}

	private AlipayDTO queryByLogin(Payqrcode payqrcode, Date createtime) {
		try {
			Map<String, String> header = new HashMap<>();
			header.put("Cookies", payqrcode.getCookie());
			header.put("Host", "mbillexprod.alipay.com");
			header.put("Origin", "https://mbillexprod.alipay.com");
			header.put("Referer", "https://mbillexprod.alipay.com/enterprise/tradeListQuery.htm");
			header.put("User-Agent", "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36");
			header.put("X-Requested-With", "XMLHttpRequest");

			Map<String, String> params = new HashMap<>();
			params.put("billUserId", payqrcode.getBilluserid());
			params.put("ctoken", payqrcode.getCtoken());
			params.put("queryEntrance", "1");
			params.put("status", "ALL");
			params.put("entityFilterType", "0");
			params.put("precisionValue", "");
			params.put("activeTargetSearchItem", "tradeNo");
			params.put("tradeFrom", "ALL");
			params.put("pageSize", "20");
			params.put("pageNum", "1");
			params.put("sortTarget", "gmtCreate");
			params.put("order", "descend");
			params.put("sortType", "0");
			params.put("_input_charset", "gbk");
			String startTime = DateUtils.format(DateUtils.secondFormat, createtime);
			String endTime = DateUtils.format(DateUtils.secondFormat, new Date());
			params.put("startTime", startTime);
			params.put("endTime", endTime);

			String result = HttpUtils.doPost("https://mbillexprod.alipay.com/enterprise/tradeListQuery.json", params, header);
			if (StringUtils.isEmpty(result)) {
				log.info("查询无结果");
				return null;
			}
			JsonNode node = UtilJson.getObjectMapper().readTree(result);
			if (!StringUtils.isEmpty(node.get("target"))) {
				// TODO
				Payqrcode payqrcode2 = new Payqrcode();
				payqrcode2.setCodeid(payqrcode.getCodeid());
				payqrcode2.setLoginstate("2");
				payqrcode2.setUpdatetime(new Date());
				payqrcodeMapper.updateByPrimaryKeySelective(payqrcode2);
				log.info("已掉线");
				return null;
			}
			List<AlipayDTO> list = (List<AlipayDTO>) UtilJson.readListValue(node.get("result").get("detail").toString(), AlipayDTO.class);
			for (AlipayDTO alipayDTO : list) {
				if (eq(alipayDTO.getGoodsTitle(), payqrcode.getGoodstitle())) {
					return alipayDTO;
				}
			}
		} catch (Exception e) {
			log.info("查询异常：{}", e);
		}
		return null;

	}

	@Override
	public void updatePaylog(PayLog payLog, AlipayDTO alipayDTO) {
		try {
			String tradeStatus = alipayDTO.getTradeStatus();
			String paystate = convertStatus(tradeStatus);
			payLog.setPaystate(paystate);
			String gmtCreate = alipayDTO.getGmtCreate();// 2018-10-14 20:39:34
			try {
				Date paytime = DateUtils.parse(gmtCreate, DateUtils.secondFormat);
				payLog.setPaytime(paytime);
			} catch (ParseException e) {
				e.printStackTrace();
			}
			payLog.setPayuser(alipayDTO.getConsumerName());
			payLog.setThirdtradeno(alipayDTO.getTradeNo());
			payLog.setNotifystate(NotifyState.NO_NOTICE.getCode());
			payLog.setRemark(new Gson().toJson(alipayDTO));
			payLog.setUpdatetime(new Date());
			payLogMapper.updateByPrimaryKeySelective(payLog);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private String convertStatus(String tradeStatus) {
		if ("成功".equals(tradeStatus)) {
			return PayState.SUCCESS.getCode();
		}
		return PayState.FAIL.getCode();
	}

	// 异步通知下游
	@Override
	public void notice(PayLog payLog) {
		String merchantid = payLog.getMerchantid();
		String notifyurl = payLog.getNotifyurl();
		if (StringUtils.isEmpty(notifyurl)) {
			// 获取Cp信息
			CpUserInfo cpUserInfo = cpUserInfoMapper.queryByMerchantid(merchantid);
			notifyurl = cpUserInfo.getNotifyurl();
		}
		if (StringUtils.isEmpty(notifyurl)) {
			log.info("未查询到同步地址,商户号:[{}]", merchantid);
			return;
		}
		// 组装同步url
		String notifydata = getUrl(payLog, notifyurl);
		String notifystate = NotifyState.FAIL.getCode();
		try {
			String result = HttpUtils.doGet(notifydata);
			if (eq(result, "ok")) {
				notifystate = NotifyState.SUCCESS.getCode();
			}
		} catch (IOException e) {
			notifystate = NotifyState.EXCEPTION.getCode();
			e.printStackTrace();
		}
		// 更新同步结果
		payLog.setNotifydata(notifydata);
		payLog.setNotifystate(notifystate);
		payLog.setNotifytime(new Date());
		payLogMapper.updateByPrimaryKeySelective(payLog);
	}

	private String getUrl(PayLog payLog, String notifyurl) {
		StringBuffer buffer = new StringBuffer(notifyurl);
		if (notifyurl.contains("?")) {
			if (!notifyurl.endsWith("&") && !notifyurl.endsWith("?")) {
				buffer.append("&");
			}
		} else {
			buffer.append("?");
		}
		buffer.append("merchantid").append("=").append(payLog.getMerchantid()).append("&");
		buffer.append("transdata").append("=").append(payLog.getTransdata()).append("&");
		buffer.append("cporderno").append("=").append(payLog.getCporderno()).append("&");
		buffer.append("paystate").append("=").append(payLog.getPaystate()).append("&");
		buffer.append("thirdtradeno").append("=").append(payLog.getThirdtradeno()).append("&");
		try {
			String paytime = DateUtils.format(DateUtils.secondFormat, payLog.getPaytime());
			buffer.append("paytime").append("=").append(paytime).append("&");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return buffer.toString();
	}

}
